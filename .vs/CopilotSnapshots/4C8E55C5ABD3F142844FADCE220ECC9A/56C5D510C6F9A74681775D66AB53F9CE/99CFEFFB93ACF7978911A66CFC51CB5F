const { app, BrowserWindow, Menu, shell, dialog } = require('electron');
const path = require('path');
const isDev = process.env.NODE_ENV === 'development';

// تحديد ما إذا كان التطبيق مُجمع (packaged) أم لا
const isPackaged = app.isPackaged;

// تمكين live reload للتطوير
if (isDev) {
  try {
    require('electron-reload')(__dirname, {
      electron: path.join(__dirname, '../node_modules', '.bin', 'electron'),
      hardResetMethod: 'exit'
    });
  } catch (err) {
    // electron-reload غير مثبت
  }
}

let mainWindow;

function createWindow() {
  // إنشاء نافذة المتصفح
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    minWidth: 800,
    minHeight: 600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      preload: path.join(__dirname, 'preload.cjs'),
      webSecurity: true, // تمكين web security دائماً
      allowRunningInsecureContent: false,
      experimentalFeatures: false
    },
    icon: path.join(__dirname, 'icons', 'icon.png'),
    title: 'سكني - تطبيق العقارات',
    show: false,
    titleBarStyle: 'default',
    autoHideMenuBar: false
  });

  // تحديد URL للتحميل
  let startUrl;
  
  if (isDev) {
    // في وضع التطوير: استخدم الخادم المحلي
    startUrl = 'http://localhost:8080';
  } else if (isPackaged) {
    // في النسخة المُجمعة: استخدم خادم محلي أو الملفات المحلية حسب توفر الاتصال
    // محاولة الاتصال بخادم محلي أولاً، ثم الملفات المحلية
    startUrl = 'http://localhost:8080';
  } else {
    // للتطوير مع ملفات مبنية
    startUrl = `file://${path.join(__dirname, '../dist/index.html')}`;
  }
  
  console.log('🚀 تحميل التطبيق من:', startUrl);
  console.log('📦 التطبيق مُجمع:', isPackaged);
  console.log('🔧 وضع التطوير:', isDev);
  
  // تحميل التطبيق مع معالجة الأخطاء
  mainWindow.loadURL(startUrl).catch(err => {
    console.error('❌ فشل في تحميل:', startUrl, err);
    
    if (isPackaged && startUrl.startsWith('http://')) {
      // إذا فشل الاتصال بالخادم في النسخة المُجمعة، استخدم الملفات المحلية
      const fallbackUrl = `file://${path.join(__dirname, '../dist/index.html')}`;
      console.log('🔄 محاولة تحميل من الملفات المحلية:', fallbackUrl);
      
      mainWindow.loadURL(fallbackUrl).catch(fallbackErr => {
        console.error('❌ فشل في تحميل الملفات المحلية أيضاً:', fallbackErr);
        
        // عرض صفحة خطأ
        mainWindow.loadURL(`data:text/html;charset=utf-8,
          <!DOCTYPE html>
          <html dir="rtl" lang="ar">
          <head>
            <meta charset="UTF-8">
            <title>خطأ في التحميل</title>
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
              .error { color: #e74c3c; }
              .info { color: #3498db; margin-top: 20px; }
            </style>
          </head>
          <body>
            <h1 class="error">⚠️ خطأ في تحميل التطبيق</h1>
            <p>لم يتمكن التطبيق من الاتصال بالخادم أو تحميل الملفات المحلية.</p>
            <div class="info">
              <p><strong>الحلول المقترحة:</strong></p>
              <ul style="text-align: right; display: inline-block;">
                <li>تأكد من الاتصال بالإنترنت</li>
                <li>تأكد من تشغيل خادم التطبيق على المنفذ 8080</li>
                <li>أعد تشغيل التطبيق</li>
                <li>تواصل مع الدعم الفني</li>
              </ul>
            </div>
          </body>
          </html>
        `);
      });
    }
  });

  // إظهار النافذة عند جاهزيتها
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
    
    // فتح DevTools في وضع التطوير أو عند وجود مشاكل
    if (isDev) {
      mainWindow.webContents.openDevTools();
    }
  });

  // معالجة أخطاء التحميل
  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {
    console.error('❌ فشل تحميل الصفحة:', errorCode, errorDescription, validatedURL);
    
    if (validatedURL.startsWith('http://localhost:8080')) {
      console.log('🔄 محاولة الاتصال بخادم مختلف...');
      
      // محاولة الاتصال بعناوين أخرى محتملة
      const alternativeUrls = [
        'http://127.0.0.1:8080',
        'http://localhost:3000',
        'http://127.0.0.1:3000'
      ];
      
      tryAlternativeUrls(alternativeUrls, 0);
    }
  });

  function tryAlternativeUrls(urls, index) {
    if (index >= urls.length) {
      console.log('❌ فشل في جميع المحاولات، سيتم عرض رسالة خطأ');
      return;
    }
    
    const url = urls[index];
    console.log(`🔄 محاولة ${index + 1}: ${url}`);
    
    mainWindow.loadURL(url).catch(() => {
      tryAlternativeUrls(urls, index + 1);
    });
  }

  // التعامل مع إغلاق النافذة
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  // التعامل مع الروابط الخارجية
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url);
    return { action: 'deny' };
  });

  // منع التنقل لمواقع خارجية
  mainWindow.webContents.on('will-navigate', (event, navigationUrl) => {
    const parsedUrl = new URL(navigationUrl);
    const allowedOrigins = [
      'http://localhost:8080',
      'http://127.0.0.1:8080',
      'http://localhost:3000',
      'http://127.0.0.1:3000'
    ];
    
    if (!allowedOrigins.includes(parsedUrl.origin) && !navigationUrl.startsWith('file://') && !navigationUrl.startsWith('data:')) {
      event.preventDefault();
      shell.openExternal(navigationUrl);
    }
  });

  // إنشاء القائمة
  createMenu();
}

function createMenu() {
  const template = [
    {
      label: 'ملف',
      submenu: [
        {
          label: 'الصفحة الرئيسية',
          accelerator: 'CmdOrCtrl+Home',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/"');
          }
        },
        { type: 'separator' },
        {
          label: 'إعادة الاتصال',
          accelerator: 'CmdOrCtrl+Shift+R',
          click: () => {
            console.log('🔄 إعادة الاتصال...');
            mainWindow.reload();
          }
        },
        {
          label: 'تحديث',
          accelerator: 'CmdOrCtrl+R',
          click: () => {
            mainWindow.webContents.reloadIgnoringCache();
          }
        },
        { type: 'separator' },
        {
          label: 'خروج',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'تصفح',
      submenu: [
        {
          label: 'العقارات',
          accelerator: 'CmdOrCtrl+1',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/properties"');
          }
        },
        {
          label: 'المفضلة',
          accelerator: 'CmdOrCtrl+2',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/favorites"');
          }
        },
        {
          label: 'لوحة التحكم',
          accelerator: 'CmdOrCtrl+D',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/dashboard"');
          }
        }
      ]
    },
    {
      label: 'عرض',
      submenu: [
        {
          label: 'تكبير',
          accelerator: 'CmdOrCtrl+Plus',
          click: () => {
            const webContents = mainWindow.webContents;
            webContents.setZoomLevel(webContents.getZoomLevel() + 0.5);
          }
        },
        {
          label: 'تصغير',
          accelerator: 'CmdOrCtrl+-',
          click: () => {
            const webContents = mainWindow.webContents;
            webContents.setZoomLevel(webContents.getZoomLevel() - 0.5);
          }
        },
        {
          label: 'الحجم الطبيعي',
          accelerator: 'CmdOrCtrl+0',
          click: () => {
            mainWindow.webContents.setZoomLevel(0);
          }
        },
        { type: 'separator' },
        {
          label: 'ملء الشاشة',
          accelerator: 'F11',
          click: () => {
            mainWindow.setFullScreen(!mainWindow.isFullScreen());
          }
        },
        { type: 'separator' },
        {
          label: 'أدوات المطور',
          accelerator: 'F12',
          click: () => {
            mainWindow.webContents.toggleDevTools();
          }
        }
      ]
    },
    {
      label: 'اتصال',
      submenu: [
        {
          label: 'فحص الاتصال',
          click: () => {
            mainWindow.webContents.executeJavaScript(`
              fetch('http://localhost:8080')
                .then(() => console.log('✅ الاتصال جيد'))
                .catch(err => console.error('❌ مشكلة في الاتصال:', err))
            `);
          }
        },
        {
          label: 'معلومات الاتصال',
          click: () => {
            dialog.showMessageBox(mainWindow, {
              type: 'info',
              title: 'معلومات الاتصال',
              message: 'حالة الاتصال الحالية',
              detail: `التطبيق مُجمع: ${app.isPackaged ? 'نعم' : 'لا'}\nوضع التطوير: ${isDev ? 'نعم' : 'لا'}\nURL الحالي: ${mainWindow.webContents.getURL()}`,
              buttons: ['موافق']
            });
          }
        }
      ]
    },
    {
      label: 'مساعدة',
      submenu: [
        {
          label: 'حول التطبيق',
          click: () => {
            dialog.showMessageBox(mainWindow, {
              type: 'info',
              title: 'حول سكني',
              message: 'سكني - تطبيق العقارات',
              detail: 'منصة متكاملة للعثور على أفضل العقارات للبيع والإيجار في مجمع الدور\n\nالإصدار: 1.0.0\nتطوير: فريق سكني',
              buttons: ['موافق']
            });
          }
        }
      ]
    }
  ];

  // تخصيص القائمة لـ macOS
  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about', label: 'حول ' + app.getName() },
        { type: 'separator' },
        { role: 'services', label: 'الخدمات' },
        { type: 'separator' },
        { role: 'hide', label: 'إخفاء ' + app.getName() },
        { role: 'hideothers', label: 'إخفاء الآخرين' },
        { role: 'unhide', label: 'إظهار الكل' },
        { type: 'separator' },
        { role: 'quit', label: 'إنهاء ' + app.getName() }
      ]
    });
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

// التطبيق جاهز
app.whenReady().then(() => {
  createWindow();
  
  // إعداد protocol للـ PWA
  app.setAsDefaultProtocolClient('maskani');
});

// إنهاء التطبيق عند إغلاق جميع النوافذ
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// التعامل مع deep links
app.on('open-url', (event, url) => {
  event.preventDefault();
  if (mainWindow) {
    if (mainWindow.isMinimized()) mainWindow.restore();
    mainWindow.focus();
  }
});

// منع فتح نوافذ جديدة
app.on('web-contents-created', (event, contents) => {
  contents.on('new-window', (navigationEvent, navigationUrl) => {
    navigationEvent.preventDefault();
    shell.openExternal(navigationUrl);
  });
});

// التعامل مع certificate errors
app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
  if (isDev) {
    // في وضع التطوير، تجاهل أخطاء الشهادات
    event.preventDefault();
    callback(true);
  } else {
    // في الإنتاج، استخدم السلوك الافتراضي
    callback(false);
  }
});