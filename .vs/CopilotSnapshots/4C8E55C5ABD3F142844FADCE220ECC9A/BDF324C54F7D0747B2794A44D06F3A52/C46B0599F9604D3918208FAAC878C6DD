import { useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { Toaster } from '@/components/ui/sonner';
import { localDB } from '@/services/localDatabase';
import { syncService } from '@/services/syncService';
import { NetworkIndicator } from '@/components/sync/SyncStatusCard';

// صفحات التطبيق
import Home from './pages/Home';
import Properties from './pages/Properties';
import PropertyDetails from './pages/PropertyDetails';
import { Favorites } from './pages/Favorites';
import Dashboard from './pages/Dashboard';

// إنشاء QueryClient
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 دقائق
      gcTime: 10 * 60 * 1000, // 10 دقائق (كان cacheTime سابقاً)
      retry: (failureCount, error) => {
        // إعادة المحاولة فقط إذا كان الاتصال متاح
        if (!navigator.onLine) return false;
        return failureCount < 3;
      },
      networkMode: 'offlineFirst', // محاولة العمل بدون إنترنت أولاً
    },
    mutations: {
      networkMode: 'offlineFirst',
      retry: (failureCount, error) => {
        if (!navigator.onLine) return false;
        return failureCount < 2;
      },
    },
  },
});

function App() {
  // تهيئة قاعدة البيانات المحلية عند بدء التطبيق
  useEffect(() => {
    const initializeApp = async () => {
      try {
        console.log('🚀 تهيئة تطبيق سكني...');
        
        // تهيئة قاعدة البيانات المحلية
        await localDB.init();
        console.log('✅ تم تهيئة قاعدة البيانات المحلية');

        // بدء خدمة المزامنة
        console.log('🔄 بدء خدمة المزامنة...');
        
        // تأخير بسيط للسماح للواجهة بالتحميل
        setTimeout(() => {
          console.log('✅ تم تهيئة التطبيق بنجاح');
        }, 1000);

      } catch (error) {
        console.error('❌ خطأ في تهيئة التطبيق:', error);
        
        // في حالة فشل تهيئة قاعدة البيانات، المحاولة مرة أخرى
        setTimeout(() => {
          console.log('🔄 إعادة محاولة تهيئة قاعدة البيانات...');
          localDB.init().catch(err => {
            console.error('❌ فشل في إعادة تهيئة قاعدة البيانات:', err);
          });
        }, 5000);
      }
    };

    initializeApp();

    // تنظيف الموارد عند إغلاق التطبيق
    return () => {
      console.log('🧹 تنظيف موارد التطبيق...');
      syncService.stop();
      localDB.close();
    };
  }, []);

  // مراقبة تغييرات حالة الاتصال
  useEffect(() => {
    const handleOnline = () => {
      console.log('🌐 تم استعادة الاتصال - تحفيز المزامنة');
      syncService.triggerSync();
      
      // إعادة تفعيل الاستعلامات المؤجلة
      queryClient.resumePausedMutations();
      queryClient.invalidateQueries();
    };

    const handleOffline = () => {
      console.log('📱 فقدان الاتصال - التبديل للوضع المحلي');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // مراقبة إغلاق التطبيق للتأكد من حفظ البيانات
  useEffect(() => {
    const handleBeforeUnload = (event: BeforeUnloadEvent) => {
      // في حالة وجود بيانات لم تُزامن بعد
      const syncStats = syncService.getSyncStatus();
      if (syncStats.syncInProgress) {
        event.preventDefault();
        event.returnValue = 'توجد عملية مزامنة قيد التنفيذ. هل تريد المغادرة؟';
        return event.returnValue;
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, []);

  return (
    <QueryClientProvider client={queryClient}>
      <Router>
        <div className="min-h-screen bg-background">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/properties" element={<Properties />} />
            <Route path="/properties/:id" element={<PropertyDetails />} />
            <Route path="/favorites" element={<Favorites />} />
            <Route path="/dashboard" element={<Dashboard />} />
          </Routes>
          
          {/* مؤشر حالة الشبكة */}
          <NetworkIndicator />
          
          {/* إشعارات التطبيق */}
          <Toaster 
            position="top-center"
            richColors
            closeButton
            toastOptions={{
              style: {
                fontFamily: 'Tajawal, sans-serif',
                direction: 'rtl',
              },
            }}
          />
        </div>
      </Router>
    </QueryClientProvider>
  );
}

export default App;

