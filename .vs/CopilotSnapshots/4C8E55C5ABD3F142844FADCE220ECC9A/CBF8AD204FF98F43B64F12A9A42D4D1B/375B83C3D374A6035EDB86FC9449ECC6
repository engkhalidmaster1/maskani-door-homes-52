const { app, BrowserWindow, Menu, shell, dialog } = require('electron');
const path = require('path');
const isDev = process.env.NODE_ENV === 'development';

// تمكين live reload للتطوير
if (isDev) {
  try {
    require('electron-reload')(__dirname, {
      electron: path.join(__dirname, '../node_modules', '.bin', 'electron'),
      hardResetMethod: 'exit'
    });
  } catch (err) {
    // electron-reload غير مثبت
  }
}

let mainWindow;

function createWindow() {
  // إنشاء نافذة المتصفح
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    minWidth: 800,
    minHeight: 600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      preload: path.join(__dirname, 'preload.cjs'),
      webSecurity: !isDev // تعطيل web security في التطوير فقط
    },
    icon: path.join(__dirname, 'icons', 'icon.png'),
    title: 'سكني - تطبيق العقارات',
    show: false,
    titleBarStyle: 'default',
    autoHideMenuBar: false
  });

  // تحميل التطبيق
  const startUrl = isDev 
    ? 'http://localhost:8080' 
    : `file://${path.join(__dirname, '../dist/index.html')}`;
  
  mainWindow.loadURL(startUrl);

  // إظهار النافذة عند جاهزيتها
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
    
    // فتح DevTools في وضع التطوير
    if (isDev) {
      mainWindow.webContents.openDevTools();
    }
  });

  // التعامل مع إغلاق النافذة
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  // التعامل مع الروابط الخارجية
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url);
    return { action: 'deny' };
  });

  // منع التنقل لمواقع خارجية
  mainWindow.webContents.on('will-navigate', (event, navigationUrl) => {
    const parsedUrl = new URL(navigationUrl);
    
    if (parsedUrl.origin !== 'http://localhost:8080' && !navigationUrl.startsWith('file://')) {
      event.preventDefault();
      shell.openExternal(navigationUrl);
    }
  });

  // إنشاء القائمة
  createMenu();
}

function createMenu() {
  const template = [
    {
      label: 'ملف',
      submenu: [
        {
          label: 'الصفحة الرئيسية',
          accelerator: 'CmdOrCtrl+Home',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/"');
          }
        },
        { type: 'separator' },
        {
          label: 'تحديث',
          accelerator: 'CmdOrCtrl+R',
          click: () => {
            mainWindow.reload();
          }
        },
        {
          label: 'إعادة التحميل الكامل',
          accelerator: 'CmdOrCtrl+Shift+R',
          click: () => {
            mainWindow.webContents.reloadIgnoringCache();
          }
        },
        { type: 'separator' },
        {
          label: 'خروج',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'تصفح',
      submenu: [
        {
          label: 'العقارات',
          accelerator: 'CmdOrCtrl+1',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/properties"');
          }
        },
        {
          label: 'المفضلة',
          accelerator: 'CmdOrCtrl+2',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/favorites"');
          }
        },
        {
          label: 'لوحة التحكم',
          accelerator: 'CmdOrCtrl+D',
          click: () => {
            mainWindow.webContents.executeJavaScript('window.location.href = "/dashboard"');
          }
        }
      ]
    },
    {
      label: 'عرض',
      submenu: [
        {
          label: 'تكبير',
          accelerator: 'CmdOrCtrl+Plus',
          click: () => {
            const webContents = mainWindow.webContents;
            webContents.setZoomLevel(webContents.getZoomLevel() + 0.5);
          }
        },
        {
          label: 'تصغير',
          accelerator: 'CmdOrCtrl+-',
          click: () => {
            const webContents = mainWindow.webContents;
            webContents.setZoomLevel(webContents.getZoomLevel() - 0.5);
          }
        },
        {
          label: 'الحجم الطبيعي',
          accelerator: 'CmdOrCtrl+0',
          click: () => {
            mainWindow.webContents.setZoomLevel(0);
          }
        },
        { type: 'separator' },
        {
          label: 'ملء الشاشة',
          accelerator: 'F11',
          click: () => {
            mainWindow.setFullScreen(!mainWindow.isFullScreen());
          }
        },
        { type: 'separator' },
        {
          label: 'أدوات المطور',
          accelerator: 'F12',
          click: () => {
            mainWindow.webContents.toggleDevTools();
          }
        }
      ]
    },
    {
      label: 'مساعدة',
      submenu: [
        {
          label: 'حول التطبيق',
          click: () => {
            dialog.showMessageBox(mainWindow, {
              type: 'info',
              title: 'حول سكني',
              message: 'سكني - تطبيق العقارات',
              detail: 'منصة متكاملة للعثور على أفضل العقارات للبيع والإيجار في مجمع الدور\n\nالإصدار: 1.0.0\nتطوير: فريق سكني',
              buttons: ['موافق']
            });
          }
        }
      ]
    }
  ];

  // تخصيص القائمة لـ macOS
  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about', label: 'حول ' + app.getName() },
        { type: 'separator' },
        { role: 'services', label: 'الخدمات' },
        { type: 'separator' },
        { role: 'hide', label: 'إخفاء ' + app.getName() },
        { role: 'hideothers', label: 'إخفاء الآخرين' },
        { role: 'unhide', label: 'إظهار الكل' },
        { type: 'separator' },
        { role: 'quit', label: 'إنهاء ' + app.getName() }
      ]
    });
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

// التطبيق جاهز
app.whenReady().then(() => {
  createWindow();
  
  // إعداد protocol للـ PWA
  app.setAsDefaultProtocolClient('maskani');
});

// إنهاء التطبيق عند إغلاق جميع النوافذ
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// التعامل مع deep links
app.on('open-url', (event, url) => {
  event.preventDefault();
  if (mainWindow) {
    if (mainWindow.isMinimized()) mainWindow.restore();
    mainWindow.focus();
  }
});

// منع فتح نوافذ جديدة
app.on('web-contents-created', (event, contents) => {
  contents.on('new-window', (navigationEvent, navigationUrl) => {
    navigationEvent.preventDefault();
    shell.openExternal(navigationUrl);
  });
});

// التعامل مع certificate errors
app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
  if (isDev) {
    // في وضع التطوير، تجاهل أخطاء الشهادات
    event.preventDefault();
    callback(true);
  } else {
    // في الإنتاج، استخدم السلوك الافتراضي
    callback(false);
  }
});